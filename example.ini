<?xml version="1.0" encoding="Latin-1"?>
<Parameters comment="some builtin parameters can be used in the lines to be written in the outfile.
    [[File]] is the name of the current File
    [[SubDir]] is the name of the current visited dir">
<RootDirs type="lst" comment="List of directory trees to be visited
        SourceDir is mandatory">
    <SourceDir>C:\Jice\vim\plugin</SourceDir><dd>other optional argument</dd>
    <SourceDir>C:\Jice\vim\ftplugin</SourceDir><dd>linked to the SourceDir</dd>
</RootDirs>
<ArgPagePre type="elt" comment="To be written at the beginning of the outfile">
    The Main Title
</ArgPagePre>
<ArgPagePost type="elt" comment="To be written at the end of the out File">
    The END
</ArgPagePost>
<ArgRootDirPre type="elt" comment="To be written for each root dir before visiting it">
        We are going to visit "RootDirs.SourceDir" : [[RootDirs.SourceDir]].
        We can use other params like "RootDirs.dd" : [[RootDirs.dd]].
        Any number of other params can be defined at this level
</ArgRootDirPre>
<ArgRootDirPost type="elt" comment="To be written for each root dir after having visited it">
        "RootDirs.SourceDir" : [[RootDirs.SourceDir]] has been visited
</ArgRootDirPost>
<ArgSubDirPre type="elt" comment="To be written for each sub dir before visiting it">
            And NOW, we're entering "SubDir" : [[SubDir]].
            This is a buildin parameter that contains the name of the visited directory
</ArgSubDirPre>
<ArgSubDirPost type="elt" comment="To be written for each sub dir after having visited it">
            "SubDir" : We are leaving [[SubDir]]
</ArgSubDirPost>
<ArgFilePre type="elt" comment="To be written for each File before visiting it">
                Now, it's time to manage "File" (another buildin parameter) : [[File]]
                We can execute VIM Commands like "substitute("File","vim","txt","")" : {{substitute("[[File]]","vim","txt","")}}
                These commands can be executed at every level (ArgPagePre, ArgRootDirPre,...)
                And We can use other arguments to create commands
                mv SubDir/File SubDir/substitute("File","vim","txt","")
                mv [[SubDir]]/[[File]] [[SubDir]]/{{substitute("[[File]]","vim","txt","")}}
</ArgFilePre>
<ArgFilePost type="elt" comment="To be written for each File after having visited it">
                OK For "File" : [[File]]
</ArgFilePost>
<WildCard type="elt" comment="To filter the files. This uses the python regexp syntax.">
\.vim$
</WildCard>
<VimFileCommand type="elt" comment="Command to be executed on each opened file">
let @u=expand("%:p") . " " . line("$") . " lines"
let @o="Here are the 3 first lines of the file :"
norm! ggVjj"Oy
</VimFileCommand>
<OutFile type="lst" comment="name = name of the outfile
    mode = w(rite) or a(ppend)
    register = register used to store strings to write in this outfile
    The Arg... arguments are written in the first outfile. Other outfiles can
    be used to write datas from the vim command (using different registers)">
    <Name>C:\Jice\vim\outFiles\FicOut1.txt</Name><Mode>w</Mode><Register>o</Register>
    <Name>C:\Jice\vim\outFiles\FicOut2.txt</Name><Mode>w</Mode><Register>u</Register>
</OutFile>
<OutFileCommand type="elt" comment="Command to be executed on the out file when it is opened">
let s:toto = append(line("$"),"")
let s:toto = append(line("$"),"This example is now finished. This outfile contains " . (line("$")+1) . " Lines")
w
</OutFileCommand>
</Parameters>
